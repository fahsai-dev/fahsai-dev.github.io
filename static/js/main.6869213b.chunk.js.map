{"version":3,"sources":["constant/COLOR.js","constant/IMAGES.js","constant/PROJECTS.js","components/card/ProjectCard.js","components/tab/TabMenu.js","components/section/ProjectsSection.js","App.js","serviceWorker.js","index.js"],"names":["color","primary","background","black","white","whiteSmoke","IMAGES","cover","title","thumbnail","subtitle","useStyles","makeStyles","root","width","backgroundColor","COLOR","borderRadius","boxShadow","media","height","objectFit","MediaCard","props","classes","Card","className","CardActionArea","CardMedia","component","image","CardContent","style","minHeight","Typography","gutterBottom","variant","theme","container","flexGrow","overflow","tabs","item","padding","marginRight","selected","TabMenu","items","onChange","React","useState","value","setValue","Tabs","event","newValue","scrollButtons","disableRipple","TabIndicatorProps","map","menu","index","Tab","label","id","a11yProps","Menu","paper","control","spacing","border","marginTop","marginBottom","ProjectsSection","selectedType","setSelectedType","projectLists","setProjectLists","useEffect","PROJECTS","Fragment","Grid","xs","paddingTop","justify","key","ProjectCard","styles","AppHeader","display","alignItems","justifyContent","breakpoints","down","up","Button","margin","borderColor","fontSize","App","md","maxHeight","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6869213b.chunk.js","sourcesContent":["const color = {\n  primary: \"#f36d4f\",\n  background: \"#282c34\",\n  black: \"rgb(33, 33, 33)\",\n  white: \"#ffff\",\n  whiteSmoke: \"#f9f9f9\",\n};\n\nexport default color;\n","const IMAGES = {\n  cover: '/cover.png',\n};\n\nexport default IMAGES;","const app = [\n  {\n    title: 'College Advisor',\n    thumbnail: '/screenshot/app-advisor.png',\n    subtitle: 'Mobile App on iPhone Link: https://youtu.be/i0fwzywEVvc',\n  },\n]\n\nconst website = [\n  {\n    title: 'Makro Click',\n    thumbnail: '/screenshot/web-makro.png',\n    subtitle: 'Order Online Website',\n  },\n  {\n    title: 'GPS Besttech',\n    thumbnail: '/screenshot/web-besttech.png',\n    subtitle: 'Company Profile Website',\n  },\n  {\n    title: 'Master Ad Dashboard',\n    thumbnail: '/screenshot/web-dashboard3.png',\n    subtitle: 'Dashboard for overview of advertising production data',\n  },\n  {\n    title: 'Buy Ticket',\n    thumbnail: '/screenshot/web-buyticket3.png',\n    subtitle: 'C# Microsoft Visual Studio 2010',\n  },\n  {\n    title: 'Search Video',\n    thumbnail: '/screenshot/web-findyoutube.png',\n    subtitle: 'React JS',\n  },\n]\n\nconst game = [\n  {\n    title: 'GAME Ying Ying Ying',\n    thumbnail: '/screenshot/web-yyygame4.png',\n    subtitle: 'GameSalad Creator',\n  }\n]\n\n\nexport default { app, website, game };","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { COLOR } from '../../constant';\n\nconst MediaCard = (props) => {\n  const { title, subtitle, thumbnail } = props;\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          className={classes.media}\n          image={thumbnail}\n          title={`ProjectThumbnail_${title}`}\n        />\n        <CardContent style={{ minHeight: 80 }}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {title}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            {subtitle}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: 345,\n    backgroundColor: '#424242',\n    color: COLOR.white,\n    borderRadius: 8,\n    boxShadow: `2px 10px 14px rgb(33, 33, 33, 0.3)`,\n  },\n  media: {\n    height: 220,\n    backgroundColor: COLOR.white,\n    objectFit: 'contain',\n  },\n});\n\nexport default MediaCard;","import React from 'react';\nimport {\n  Tabs,\n  Tab,\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { COLOR } from '../../constant';\n\nconst TabMenu = (props) => {\n  const { items, onChange } = props;\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    onChange && onChange(newValue);\n  };\n\n  const a11yProps = (index) => {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n  }\n\n  return (\n    <div className={classes.container}>\n      <Tabs\n        value={value}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        disableRipple\n        TabIndicatorProps={{ style: { height: \"2px\", backgroundColor: COLOR.primary } }}\n        className={classes.tabs}\n      >\n        {\n          items && items.map((menu, index) => (\n            <Tab\n              classes={{ root: classes.item, selected: classes.selected }}\n              label={menu}\n              {...a11yProps(index)}\n            />\n          ))\n        }\n      </Tabs>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    flexGrow: 1,\n    width: '100%',\n    overflow: 'hidden',\n    minHeight: \"auto\",\n  },\n  tabs: {\n    width: '100%',\n    height: 0\n  },\n  item: {\n    width: 'auto',\n    padding: 0,\n    marginRight: 24,\n    color: COLOR.background,\n  },\n  selected: {\n    color: COLOR.primary,\n  }\n}));\n\nexport default TabMenu; ","import React from 'react';\nimport { Grid, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  TabMenu,\n  ProjectCard\n} from '../';\nimport { PROJECTS, COLOR } from '../../constant';\n\n\nconst Menu = ['ALL', 'APPLICATION', 'WEBSITE', 'GAME'];\n\nconst ProjectsSection = () => {\n  const spacing = 2;\n  const classes = useStyles();\n\n  const [selectedType, setSelectedType] = React.useState('ALL');\n  const [projectLists, setProjectLists] = React.useState([]);\n\n\n  React.useEffect(() => {\n    if (selectedType === 'ALL') { setProjectLists([...PROJECTS.app, ...PROJECTS.website, ...PROJECTS.game]); }\n    if (selectedType === 'APPLICATION') { setProjectLists([...PROJECTS.app]); }\n    if (selectedType === 'WEBSITE') { setProjectLists([...PROJECTS.website]); }\n    if (selectedType === 'GAME') { setProjectLists([...PROJECTS.game]); }\n  }, [selectedType]);\n\n  return (\n    <React.Fragment>\n      <Grid container className={classes.root} style={{ backgroundColor: COLOR.whiteSmoke }}>\n        <Grid item xs={12}>\n          <TabMenu\n            items={Menu}\n            onChange={(value) => setSelectedType(Menu[value])}\n          />\n        </Grid>\n\n        <Grid item xs={12} style={{ paddingTop: 30 }}>\n          <Grid container justify=\"center\" spacing={spacing}>\n            {projectLists.map((item, index) => (\n              <Grid key={index} item>\n                <ProjectCard\n                  title={item.title}\n                  subtitle={item.subtitle}\n                  thumbnail={item.thumbnail}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n  border: {\n    marginTop: 34,\n    marginBottom: 13,\n    backgroundColor: COLOR.whiteSmoke,\n    width: '50px',\n    height: '10px'\n  }\n}));\n\nexport default ProjectsSection;\n","import React from 'react';\nimport './App.css';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ProjectsSection } from './components/section';\nimport { IMAGES, COLOR } from './constant';\n\nfunction App() {\n  const classes = styles();\n\n  return (\n    <body style={{ height: '100%' }}>\n      <Grid container className={classes.AppHeader}>\n        <Grid item xs={12} md={7}>\n          <div className=\"intro-text\">\n            <div>Hello</div>\n            <div><a className=\"weight-extraBold\" style={{ color: COLOR.primary }}>I'm Fahsai</a>, Front-End </div>\n            <div>Developer</div>\n          </div>\n          <button className={classes.Button}>Get Started</button>\n        </Grid>\n        <Grid item xs={12} md={5}>\n          <img style={{ width: '100%', maxHeight: 300, objectFit: 'contain' }} alt=\"cover\" src={IMAGES.cover} />\n        </Grid>\n      </Grid>\n      <ProjectsSection />\n    </body>\n  );\n}\n\nconst styles = makeStyles((theme) => ({\n  AppHeader: {\n    backgroundColor: '#282c34',\n    color: 'white',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    [theme.breakpoints.down('md')]: {\n      padding: 40,\n    },\n    [theme.breakpoints.up('md')]: {\n      padding: 100,\n      height: '90vh'\n    },\n  },\n  Button: {\n    width: 'auto',\n    backgroundColor: COLOR.primary,\n    color: 'white',\n    margin: '36px 0px',\n    padding: '20px 40px',\n    borderRadius: 60,\n    borderColor: COLOR.primary,\n    fontSize: 16,\n  }\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
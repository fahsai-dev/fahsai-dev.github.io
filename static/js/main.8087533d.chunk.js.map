{"version":3,"sources":["helpers/size.js","helpers/device.js","helpers/colors.js","components/card/ProjectCard.js","constant/PROJECTS.js","components/section/ProjectsSection.js","App.js","serviceWorker.js","index.js"],"names":["size","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","device","desktopL","colors","primary","background","black","white","whiteSmoke","useStyles","makeStyles","root","width","backgroundColor","color","borderRadius","boxShadow","media","height","objectFit","MediaCard","props","title","subtitle","thumbnail","classes","Card","className","CardActionArea","CardMedia","component","image","CardContent","style","minHeight","Typography","gutterBottom","variant","app","website","theme","flexGrow","paddingTop","paddingBottom","paper","control","padding","spacing","border","marginTop","marginBottom","ProjectsSection","React","useState","selectedType","projectLists","setProjectLists","useEffect","PROJECTS","Grid","container","item","xs","textAlign","justify","map","index","key","ProjectCard","Container","styled","Button","button","App","md","maxHeight","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8087533d.chunk.js","sourcesContent":["const size = {\n  mobileS: '320px',\n  mobileM: '375px',\n  mobileL: '425px',\n  tablet: '768px',\n  laptop: '1024px',\n  laptopL: '1440px',\n  desktop: '2560px'\n}\n\nexport default size;\n","import size from './size';\n\nexport const device = {\n  mobileS: `(min-width: ${size.mobileS})`,\n  mobileM: `(min-width: ${size.mobileM})`,\n  mobileL: `(min-width: ${size.mobileL})`,\n  tablet: `(min-width: ${size.tablet})`,\n  laptop: `(min-width: ${size.laptop})`,\n  laptopL: `(min-width: ${size.laptopL})`,\n  desktop: `(min-width: ${size.desktop})`,\n  desktopL: `(min-width: ${size.desktop})`\n};\n\n","const colors = {\n  primary: \"#f36d4f\",\n  background: \"#282c34\",\n  black: \"rgb(33, 33, 33)\",\n  white: \"#ffff\",\n  whiteSmoke: \"#f9f9f9\",\n};\n\nexport default colors;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport colors from '../../helpers/colors';\n\nconst MediaCard = (props) => {\n  const { title, subtitle, thumbnail } = props;\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          className={classes.media}\n          image={thumbnail}\n          title={`ProjectThumbnail_${title}`}\n        />\n        <CardContent style={{ minHeight: 80 }}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {title}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            {subtitle}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: 345,\n    backgroundColor: '#424242',\n    color: colors.white,\n    borderRadius: 8,\n    boxShadow: `2px 10px 14px rgb(33, 33, 33, 0.3)`,\n  },\n  media: {\n    height: 220,\n    backgroundColor: colors.white,\n    objectFit: 'contain',\n  },\n});\n\nexport default MediaCard;","const URL = process.env.PUBLIC_URL;\n\nconst app = [\n  {\n    title: 'College Advisor',\n    thumbnail: `${URL + '/screenshot/app-advisor.png'}`,\n    subtitle: 'Mobile App on iPhone Link: https://youtu.be/i0fwzywEVvc',\n  },\n]\n\nconst website = [\n  {\n    title: 'Makro Click',\n    thumbnail: `${URL + '/screenshot/web-makro.png'}`,\n    subtitle: 'Order Online Website',\n  },\n  {\n    title: 'GPS Besttech',\n    thumbnail: `${URL + '/screenshot/web-besttech.png'}`,\n    subtitle: 'Company Profile Website',\n  },\n  {\n    title: 'Master Ad Dashboard',\n    thumbnail: `${URL + '/screenshot/web-dashboard3.png'}`,\n    subtitle: 'Dashboard for overview of advertising production data',\n  },\n  {\n    title: 'Buy Ticket',\n    thumbnail: `${URL + '/screenshot/web-buyticket3.png'}`,\n    subtitle: 'C# Microsoft Visual Studio 2010',\n  },\n  {\n    title: 'Ying Ying Ying GAME',\n    thumbnail: `${URL + '/screenshot/web-yyygame3.png'}`,\n    subtitle: 'GameSalad Creator',\n  },\n  {\n    title: 'Search Video',\n    thumbnail: `${URL + '/screenshot/web-findyoutube.png'}`,\n    subtitle: 'React JS',\n  },\n]\n\n\nexport default { app, website };","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport colors from '../../helpers/colors';\nimport { ProjectCard } from '../card';\nimport { PROJECTS } from '../../constant';\n\n\nconst ProjectsSection = () => {\n  const spacing = 4;\n  const classes = useStyles();\n\n  const [selectedType, setSelectedType] = React.useState('all');\n  const [projectLists, setProjectLists] = React.useState([]);\n\n\n  React.useEffect(() => {\n    if (selectedType === 'all') { setProjectLists([...PROJECTS.app, ...PROJECTS.website]); }\n    if (selectedType === 'app') { setProjectLists([...PROJECTS.app]); }\n    if (selectedType === 'web') { setProjectLists([...PROJECTS.website]); }\n  }, [selectedType]);\n\n  return (\n    <div style={{ backgroundColor: colors.whiteSmoke }}>\n      <Grid container className={classes.root} spacing={spacing}>\n        <Grid item xs={12}>\n          <div className=\"font-32 weight-extraBold\" style={{ textAlign: 'center' }}>PROJETS</div>\n          <div className=\"font-18 weight-med\" style={{ textAlign: 'center' }}>\n            <p>All</p>\n          </div>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Grid container justify=\"center\" spacing={spacing}>\n            {projectLists.map((item, index) => (\n              <Grid key={index} item>\n                <ProjectCard\n                  title={item.title}\n                  subtitle={item.subtitle}\n                  thumbnail={item.thumbnail}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    paddingTop: 32,\n    paddingBottom: 32,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n  border: {\n    marginTop: 34,\n    marginBottom: 13,\n    backgroundColor: colors.whiteSmoke,\n    width: '50px',\n    height: '10px'\n  }\n}));\n\nexport default ProjectsSection;\n","import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport styled from 'styled-components';\nimport { device } from './helpers/device';\nimport colors from './helpers/colors';\nimport { ProjectsSection } from './components/section';\n\nconst Container = styled(Grid)`\n@media ${device.mobileS} {  \n    padding: 40px;\n  }\n\n  @media ${device.laptop} {  \n    padding: 80px;\n  }\n`;\n\nconst Button = styled.button`\n  width: auto;\n  background-color: ${colors.primary};\n  color: white;\n  margin: 36px 0px;\n  padding: 20px 40px;\n  border-radius: 60px;\n  border-color: ${colors.primary};\n  font-size: 16px;\n`;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <body className=\"App-body\">\n        <Container className=\"App-header\" container spacing={12}>\n          <Grid item xs={12} md={7}>\n            <div className=\"intro-text\">\n              <div>Hello</div>\n              <div><a className=\"weight-extraBold\" style={{ color: colors.primary }}>I'm Fahsai</a>, Front-End </div>\n              <div >Developer</div>\n            </div>\n            <Button>Get Started</Button>\n          </Grid>\n          <Grid item xs={12} md={5}>\n            <img style={{ width: '100%', maxHeight: 300, objectFit: 'contain' }} alt=\"cover\" src={process.env.PUBLIC_URL + '/cover.png'} />\n          </Grid>\n        </Container>\n\n        <ProjectsSection />\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}